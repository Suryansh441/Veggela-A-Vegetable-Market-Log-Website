{"ast":null,"code":"var _jsxFileName = \"D:\\\\Vegella_MERN\\\\frontend\\\\src\\\\COMPONENTS\\\\VegetablePricePrediction.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VegetablePricePredictor = () => {\n  _s();\n  const [vegetableOptions, setVegetableOptions] = useState([]);\n  const [selectedVegetable, setSelectedVegetable] = useState('');\n  const [selectedMonth, setSelectedMonth] = useState('');\n  const [predictedPrice, setPredictedPrice] = useState('');\n  useEffect(() => {\n    // Fetch vegetable names from your server\n    axios.get('http://localhost:5000/get_vegetable_names').then(response => {\n      setVegetableOptions(response.data.vegetables);\n    }).catch(error => {\n      console.error('Error fetching vegetable names:', error);\n    });\n  }, []);\n  const handlePredict = () => {\n    // Make a prediction request to your server\n    axios.post('http://localhost:5000/predict_vegetable_price', {\n      vegetable: selectedVegetable,\n      month: selectedMonth\n    }).then(response => {\n      setPredictedPrice(response.data.estimated_price);\n    }).catch(error => {\n      console.error('Error fetching predicted price:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Vegetable Price Predictor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select a vegetable:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedVegetable,\n        onChange: e => setSelectedVegetable(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), vegetableOptions.map((vegetable, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: vegetable,\n          children: vegetable\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select a month:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: selectedMonth,\n        onChange: e => setSelectedMonth(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePredict,\n      children: \"Predict Price\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), predictedPrice && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Predicted Price:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: predictedPrice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(VegetablePricePredictor, \"6i3znpQhd0dkYhqKhJJk5J0WiJ0=\");\n_c = VegetablePricePredictor;\nexport default VegetablePricePredict;\nvar _c;\n$RefreshReg$(_c, \"VegetablePricePredictor\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","VegetablePricePredictor","_s","vegetableOptions","setVegetableOptions","selectedVegetable","setSelectedVegetable","selectedMonth","setSelectedMonth","predictedPrice","setPredictedPrice","get","then","response","data","vegetables","catch","error","console","handlePredict","post","vegetable","month","estimated_price","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","index","type","onClick","_c","VegetablePricePredict","$RefreshReg$"],"sources":["D:/Vegella_MERN/frontend/src/COMPONENTS/VegetablePricePrediction.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst VegetablePricePredictor = () => {\r\n  const [vegetableOptions, setVegetableOptions] = useState([]);\r\n  const [selectedVegetable, setSelectedVegetable] = useState('');\r\n  const [selectedMonth, setSelectedMonth] = useState('');\r\n  const [predictedPrice, setPredictedPrice] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Fetch vegetable names from your server\r\n    axios.get('http://localhost:5000/get_vegetable_names')\r\n      .then((response) => {\r\n        setVegetableOptions(response.data.vegetables);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching vegetable names:', error);\r\n      });\r\n  }, []);\r\n\r\n  const handlePredict = () => {\r\n    // Make a prediction request to your server\r\n    axios.post('http://localhost:5000/predict_vegetable_price', {\r\n      vegetable: selectedVegetable,\r\n      month: selectedMonth,\r\n    })\r\n      .then((response) => {\r\n        setPredictedPrice(response.data.estimated_price);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching predicted price:', error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Vegetable Price Predictor</h1>\r\n      <div>\r\n        <label>Select a vegetable:</label>\r\n        <select\r\n          value={selectedVegetable}\r\n          onChange={(e) => setSelectedVegetable(e.target.value)}\r\n        >\r\n          <option value=\"\">Select</option>\r\n          {vegetableOptions.map((vegetable, index) => (\r\n            <option key={index} value={vegetable}>\r\n              {vegetable}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div>\r\n        <label>Select a month:</label>\r\n        <input\r\n          type=\"number\"\r\n          value={selectedMonth}\r\n          onChange={(e) => setSelectedMonth(e.target.value)}\r\n        />\r\n      </div>\r\n      <button onClick={handlePredict}>Predict Price</button>\r\n      {predictedPrice && (\r\n        <div>\r\n          <h2>Predicted Price:</h2>\r\n          <p>{predictedPrice}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VegetablePricePredict;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}